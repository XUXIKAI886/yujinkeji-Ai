import React, { useRef } from 'react';
import styled from 'styled-components';
import { Avatar } from 'antd';
import { CopyOutlined, DownloadOutlined, UserOutlined, RobotOutlined, FilePdfOutlined, FileMarkdownOutlined } from '@ant-design/icons';
import ReactMarkdown from 'react-markdown';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { tomorrow } from 'react-syntax-highlighter/dist/esm/styles/prism';

const MessageWrapper = styled.div`
  display: flex;
  gap: 10px;
  margin-bottom: 12px;
  transition: all 0.3s ease;
  padding: 3px 6px;
  border-radius: 16px;
  position: relative;
  
  &:hover {
    background: rgba(255, 255, 255, 0.9);
    box-shadow: 0 3px 15px rgba(0, 0, 0, 0.07);
  }
  
  &::after {
    content: '';
    position: absolute;
    bottom: -8px;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(90deg, transparent, rgba(229, 231, 235, 0.6), transparent);
    margin: 0 60px;
  }
  
  &:last-child::after {
    display: none;
  }
`;

const MessageAvatar = styled(Avatar)`
  width: 38px;
  height: 38px;
  border-radius: 14px;
  background: ${props => props.$isUser 
    ? 'linear-gradient(135deg, #34d399, #10b981)' 
    : 'linear-gradient(135deg, #60a5fa, #3b82f6)'};
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 18px;
  color: #ffffff;
  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.15);
  transition: all 0.3s ease;
  margin-top: 3px;
  border: 2px solid ${props => props.$isUser 
    ? 'rgba(16, 185, 129, 0.2)' 
    : 'rgba(59, 130, 246, 0.2)'};

  &:hover {
    transform: scale(1.05);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
  }

  .anticon {
    font-size: 20px;
  }
`;

const MessageBubble = styled.div`
  max-width: calc(100% - 52px);
  padding: 12px 16px;
  border-radius: 16px;
  line-height: 1.4;
  position: relative;
  color: ${props => props.isUser ? '#FFFFFF' : '#374151'};
  background: ${props => props.isUser 
    ? '#10b981' 
    : '#ffffff'};
  background-image: ${props => props.isUser 
    ? 'linear-gradient(135deg, #34d399, #10b981, #059669)' 
    : 'linear-gradient(135deg, #f0f9ff, #ffffff, #eef2ff)'};
  box-shadow: ${props => props.isUser 
    ? '0 8px 25px rgba(16, 185, 129, 0.3)' 
    : '0 8px 25px rgba(0, 0, 0, 0.08)'};
  overflow-wrap: break-word;
  white-space: pre-wrap;
  transition: all 0.3s ease;
  border: ${props => props.isUser 
    ? '1px solid rgba(16, 185, 129, 0.6)' 
    : '1px solid rgba(219, 234, 254, 1)'};

  &:hover {
    box-shadow: ${props => props.isUser 
      ? '0 12px 28px rgba(16, 185, 129, 0.35)' 
      : '0 12px 28px rgba(0, 0, 0, 0.12)'};
    transform: translateY(-3px);
  }
`;

const MessageContent = styled.div`
  color: ${props => props.isUser ? '#FFFFFF' : '#374151'};
  width: 100%;
  line-height: 1.35;
  font-size: 14px;
  letter-spacing: 0.01em;
  
  p {
    margin-bottom: 2px;
    text-shadow: ${props => props.isUser ? '0 1px 1px rgba(0, 0, 0, 0.1)' : 'none'};
  }
  
  a {
    color: ${props => props.isUser ? '#e0f2fe' : '#3b82f6'};
    text-decoration: none;
    position: relative;
    transition: all 0.2s;
    font-weight: 500;
    
    &:hover {
      color: ${props => props.isUser ? '#ffffff' : '#2563eb'};
      text-decoration: underline;
    }
  }
  
  code {
    background: ${props => props.isUser ? 'rgba(255, 255, 255, 0.15)' : 'rgba(0, 0, 0, 0.05)'};
    padding: 2px 4px;
    border-radius: 4px;
    font-size: 13px;
    font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
  }
  
  pre {
    margin: 6px 0;
    background: rgba(15, 23, 42, 0.95) !important;
    border-radius: 8px;
    overflow: hidden;
    border: 1px solid rgba(30, 41, 59, 0.5);
  }
`;

const ActionButtons = styled.div`
  display: flex;
  gap: 8px;
  margin-top: 8px;
  justify-content: ${props => props.isUser ? 'flex-start' : 'flex-end'};
  opacity: 0;
  transform: translateY(5px);
  transition: all 0.3s ease;

  ${MessageBubble}:hover & {
    opacity: 1;
    transform: translateY(0);
  }
`;

const ActionButton = styled.button`
  background: ${props => props.isUser ? 'rgba(255, 255, 255, 0.15)' : 'rgba(59, 130, 246, 0.08)'};
  border: none;
  padding: 4px 8px;
  color: ${props => props.isUser ? 'rgba(255, 255, 255, 0.9)' : 'rgba(59, 130, 246, 0.9)'};
  font-size: 13px;
  border-radius: 5px;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 5px;
  transition: all 0.25s ease;

  &:hover {
    background: ${props => props.isUser ? 'rgba(255, 255, 255, 0.25)' : 'rgba(59, 130, 246, 0.15)'};
    color: ${props => props.isUser ? '#ffffff' : '#3b82f6'};
    transform: translateY(-2px);
  }
  
  &:active {
    transform: translateY(0);
  }

  .anticon {
    font-size: 14px;
  }
`;

const StyledMarkdown = styled(ReactMarkdown)`
  width: 100%;
  line-height: 1.4;
  
  p {
    margin-bottom: 4px;
    margin-top: 4px;
  }
  
  ul, ol {
    margin: 6px 0 8px 18px;
    padding-left: 0;
  }
  
  li {
    margin: 2px 0;
    padding-left: 2px;
  }
  
  h1, h2, h3, h4, h5, h6 {
    margin: 10px 0 6px;
    line-height: 1.3;
    color: ${props => props.isUser ? '#ffffff' : '#1e40af'};
    font-weight: 600;
  }
  
  h1 {
    font-size: 1.4em;
    border-bottom: ${props => props.isUser ? '1px solid rgba(255,255,255,0.2)' : '1px solid rgba(59,130,246,0.2)'};
    padding-bottom: 4px;
  }
  
  h2 {
    font-size: 1.3em;
  }
  
  h3 {
    font-size: 1.2em;
  }
  
  h4, h5, h6 {
    font-size: 1.1em;
  }
  
  blockquote {
    border-left: 4px solid ${props => props.isUser ? 'rgba(255,255,255,0.3)' : '#3b82f6'};
    padding: 0.5em 1em;
    margin: 8px 0;
    background: ${props => props.isUser ? 'rgba(255,255,255,0.1)' : 'rgba(59,130,246,0.05)'};
    border-radius: 4px;
  }
  
  img {
    max-width: 100%;
    border-radius: 8px;
    margin: 10px 0;
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
  }
  
  code {
    background: ${props => props.isUser ? 'rgba(255,255,255,0.15)' : 'rgba(15,23,42,0.07)'};
    padding: 2px 5px;
    border-radius: 4px;
    font-family: 'SF Mono', 'Consolas', monospace;
    font-size: 0.9em;
  }
  
  pre {
    margin: 10px 0;
    padding: 12px;
    background: rgba(15,23,42,0.95) !important;
    border-radius: 8px;
    overflow-x: auto;
    border: 1px solid rgba(30,41,59,0.3);
  }
  
  table {
    border-collapse: collapse;
    width: 100%;
    margin: 10px 0;
    border: 1px solid ${props => props.isUser ? 'rgba(255,255,255,0.2)' : 'rgba(229,231,235,0.8)'};
  }
  
  th, td {
    padding: 8px 12px;
    border: 1px solid ${props => props.isUser ? 'rgba(255,255,255,0.2)' : 'rgba(229,231,235,0.8)'};
  }
  
  th {
    background: ${props => props.isUser ? 'rgba(255,255,255,0.1)' : 'rgba(243,244,246,0.8)'};
    font-weight: 600;
  }
`;

const Message = ({ message, handleCopy, handleExport, handleExportPDF, handleExportMarkdown }) => {
  const contentRef = useRef(null);

  const getContent = () => {
    if (contentRef.current) {
      return contentRef.current.innerHTML;
    }
    return message.content;
  };

  return (
    <MessageWrapper>
      <MessageAvatar $isUser={message.isUser} icon={message.isUser ? <UserOutlined /> : <RobotOutlined />} />
      <MessageBubble isUser={message.isUser}>
        <MessageContent isUser={message.isUser}>
          <div ref={contentRef}>
            <StyledMarkdown
              isUser={message.isUser}
              components={{
                code({node, inline, className, children, ...props}) {
                  const match = /language-(\w+)/.exec(className || '');
                  return !inline && match ? (
                    <SyntaxHighlighter
                      style={tomorrow}
                      language={match[1]}
                      PreTag="div"
                      {...props}
                    >
                      {String(children).replace(/\n$/, '')}
                    </SyntaxHighlighter>
                  ) : (
                    <code className={className} {...props}>
                      {children}
                    </code>
                  );
                },
                p({children}) {
                  // 如果段落完全为空或只包含空白字符，则不渲染
                  if (children.length === 0 || 
                      (children.length === 1 && 
                       (children[0] === '' || 
                        (typeof children[0] === 'string' && children[0].trim() === '')))) {
                    return null;
                  }
                  return <p>{children}</p>;
                },
                br() {
                  // 完全忽略<br>标签
                  return null;
                },
                text({children}) {
                  // 移除纯空白文本节点，替换多个连续换行为单个换行
                  if (typeof children === 'string') {
                    if (children.trim() === '') {
                      return null;
                    }
                    // 将多个连续换行符替换为单个换行符
                    children = children.replace(/\n{2,}/g, '\n');
                  }
                  return children;
                }
              }}
            >
              {message.content}
            </StyledMarkdown>
          </div>
        </MessageContent>
        <ActionButtons isUser={message.isUser}>
          <ActionButton 
            isUser={message.isUser} 
            onClick={() => handleCopy(getContent())}
          >
            <CopyOutlined /> 复制
          </ActionButton>
          <ActionButton 
            isUser={message.isUser} 
            onClick={() => handleExport(getContent())}
          >
            <DownloadOutlined /> 导出
          </ActionButton>
          <ActionButton 
            isUser={message.isUser} 
            onClick={() => handleExportPDF(getContent())}
          >
            <FilePdfOutlined /> PDF
          </ActionButton>
          <ActionButton 
            isUser={message.isUser} 
            onClick={() => handleExportMarkdown(getContent())}
          >
            <FileMarkdownOutlined /> Markdown
          </ActionButton>
        </ActionButtons>
      </MessageBubble>
    </MessageWrapper>
  );
};

export default Message; 
import React, { useRef, useState } from 'react';
import styled from 'styled-components';
import { Avatar, Modal, Button } from 'antd';
import { CopyOutlined, DownloadOutlined, UserOutlined, RobotOutlined, FilePdfOutlined, FileMarkdownOutlined, EyeOutlined } from '@ant-design/icons';
import ReactMarkdown from 'react-markdown';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { tomorrow } from 'react-syntax-highlighter/dist/esm/styles/prism';

const MessageWrapper = styled.div`
  display: flex;
  gap: 10px;
  margin-bottom: 12px;
  transition: all 0.3s ease;
  padding: 3px 6px;
  border-radius: 16px;
  position: relative;
  
  &:hover {
    background: rgba(255, 255, 255, 0.9);
    box-shadow: 0 3px 15px rgba(0, 0, 0, 0.07);
  }
  
  &::after {
    content: '';
    position: absolute;
    bottom: -8px;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(90deg, transparent, rgba(229, 231, 235, 0.6), transparent);
    margin: 0 60px;
  }
  
  &:last-child::after {
    display: none;
  }
`;

const MessageAvatar = styled(Avatar)`
  width: 38px;
  height: 38px;
  border-radius: 14px;
  background: ${props => props.$isUser 
    ? 'linear-gradient(135deg, #8a65d9, #6f42c1)' 
    : 'linear-gradient(135deg, #60a5fa, #3b82f6)'};
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 18px;
  color: #ffffff;
  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.15);
  transition: all 0.3s ease;
  margin-top: 3px;
  border: 2px solid ${props => props.$isUser 
    ? 'rgba(111, 66, 193, 0.2)' 
    : 'rgba(59, 130, 246, 0.2)'};

  &:hover {
    transform: scale(1.05);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
  }

  .anticon {
    font-size: 20px;
  }
`;

const MessageBubble = styled.div`
  max-width: calc(100% - 52px);
  padding: 10px 14px;
  border-radius: 16px;
  line-height: 1.4;
  position: relative;
  color: ${props => props.isUser ? '#FFFFFF' : '#374151'};
  background: ${props => props.isUser 
    ? '#6f42c1' 
    : '#ffffff'};
  background-image: ${props => props.isUser 
    ? 'linear-gradient(135deg, #8a65d9, #6f42c1, #059669)' 
    : 'linear-gradient(135deg, #f0f9ff, #ffffff, #eef2ff)'};
  box-shadow: ${props => props.isUser 
    ? '0 8px 25px rgba(111, 66, 193, 0.3)' 
    : '0 8px 25px rgba(0, 0, 0, 0.08)'};
  overflow-wrap: break-word;
  white-space: pre-wrap;
  transition: all 0.3s ease;
  border: ${props => props.isUser 
    ? '1px solid rgba(111, 66, 193, 0.6)' 
    : '1px solid rgba(219, 234, 254, 1)'};

  &:hover {
    box-shadow: ${props => props.isUser 
      ? '0 12px 28px rgba(111, 66, 193, 0.35)' 
      : '0 12px 28px rgba(0, 0, 0, 0.12)'};
    transform: translateY(-3px);
  }
`;

const MessageContent = styled.div`
  color: ${props => props.isUser ? '#FFFFFF' : '#374151'};
  width: 100%;
  line-height: 1.2;
  font-size: 14px;
  letter-spacing: 0;
  
  a {
    color: ${props => props.isUser ? '#ffffff' : '#2563eb'};
    text-decoration: underline;
  }
  
  code {
    background: ${props => props.isUser ? 'rgba(255, 255, 255, 0.15)' : 'rgba(0, 0, 0, 0.05)'};
    padding: 2px 4px;
    border-radius: 4px;
    font-size: 13px;
    font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
  }
  
  pre {
    margin: 6px 0;
    background: rgba(15, 23, 42, 0.95) !important;
    border-radius: 8px;
    overflow: hidden;
    border: 1px solid rgba(30, 41, 59, 0.5);
  }
`;

// SVG预览的Modal样式
const SVGPreviewModal = styled(Modal)`
  .ant-modal-content {
    background: #f9f9f9;
    border-radius: 12px;
    overflow: hidden;
  }
  
  .ant-modal-header {
    background: linear-gradient(135deg, #6f42c1, #5a67d8);
    border-bottom: none;
    padding: 16px 24px;
  }
  
  .ant-modal-title {
    color: white;
    font-weight: 600;
  }
  
  .svg-preview-container {
    padding: 20px;
    background: white;
    border-radius: 8px;
    min-height: 200px;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 16px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }
`;

// SVG预览按钮样式
const PreviewButton = styled(Button)`
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 4px 10px;
  font-size: 12px;
  height: 26px;
  background: linear-gradient(135deg, #6f42c1, #5a67d8);
  border: none;
  color: white;
  border-radius: 4px;
  cursor: pointer;
  margin-left: 8px;
  transition: all 0.3s;
  
  &:hover {
    opacity: 0.9;
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(111, 66, 193, 0.3);
    color: white;
  }
  
  .anticon {
    font-size: 12px;
    margin-right: 4px;
  }
`;

// 代码头部容器
const CodeHeader = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 6px 12px;
  background: rgba(15,23,42,0.8);
  color: white;
  font-size: 12px;
  border-top-left-radius: 8px;
  border-top-right-radius: 8px;
  font-family: 'SF Mono', 'Consolas', monospace;
  
  .code-language {
    opacity: 0.7;
  }
  
  .code-actions {
    display: flex;
    gap: 8px;
  }
`;

const ActionButtons = styled.div`
  display: flex;
  gap: 8px;
  margin-top: 8px;
`;

const ActionButton = styled.button`
  background: ${props => props.isUser ? 'rgba(255, 255, 255, 0.15)' : 'rgba(15, 23, 42, 0.05)'};
  color: ${props => props.isUser ? 'rgba(255, 255, 255, 0.8)' : '#6366f1'};
  border: none;
  border-radius: 6px;
  padding: 4px 8px;
  font-size: 12px;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 4px;
  transition: all 0.2s ease;

  &:hover {
    background: ${props => props.isUser ? 'rgba(255, 255, 255, 0.25)' : 'rgba(99, 102, 241, 0.1)'};
    transform: translateY(-1px);
  }

  .anticon {
    font-size: 14px;
  }
`;

const StyledMarkdown = styled(ReactMarkdown)`
  width: 100%;
  line-height: 1.2;
  
  p {
    margin: 0;
    padding: 0;
  }
  
  p + p {
    margin-top: 4px;
  }
  
  ul, ol {
    margin: 2px 0 2px 14px;
    padding-left: 0;
  }
  
  li {
    margin: 0;
    padding-left: 0;
  }
  
  h1, h2, h3, h4, h5, h6 {
    margin: 10px 0 4px;
    color: ${props => props.isUser ? '#ffffff' : '#111827'};
    font-weight: 600;
  }
  
  h1 {
    font-size: 1.5em;
  }
  
  h2 {
    font-size: 1.3em;
  }
  
  h3 {
    font-size: 1.2em;
  }
  
  blockquote {
    margin: 6px 0;
    padding-left: 12px;
    border-left: 3px solid ${props => props.isUser ? 'rgba(255, 255, 255, 0.4)' : '#8b5cf6'};
    color: ${props => props.isUser ? 'rgba(255, 255, 255, 0.8)' : '#6366f1'};
  }
  
  a {
    color: ${props => props.isUser ? '#ffffff' : '#2563eb'};
    text-decoration: underline;
  }
  
  code {
    background: ${props => props.isUser ? 'rgba(255,255,255,0.15)' : 'rgba(15,23,42,0.07)'};
    padding: 2px 4px;
    border-radius: 4px;
    font-family: 'SF Mono', 'Consolas', monospace;
    font-size: 0.9em;
  }
  
  pre {
    margin: 6px 0;
    padding: 10px;
    background: rgba(15,23,42,0.95) !important;
    border-radius: 8px;
    overflow-x: auto;
    border: 1px solid rgba(30,41,59,0.3);
  }
  
  table {
    border-collapse: collapse;
    width: 100%;
    margin: 6px 0;
    border-radius: 8px;
    overflow: hidden;
  }
  
  th, td {
    padding: 8px 12px;
    text-align: left;
    border: 1px solid ${props => props.isUser ? 'rgba(255,255,255,0.2)' : 'rgba(15,23,42,0.1)'};
  }
  
  th {
    background: ${props => props.isUser ? 'rgba(255,255,255,0.1)' : 'rgba(99,102,241,0.1)'};
    font-weight: 600;
  }
  
  tr:nth-child(even) {
    background: ${props => props.isUser ? 'rgba(255,255,255,0.05)' : 'rgba(15,23,42,0.03)'};
  }
`;

const Message = ({ message, handleCopy, handleExport, handleExportPDF, handleExportMarkdown }) => {
  const contentRef = useRef(null);
  // 添加SVG预览状态
  const [previewVisible, setPreviewVisible] = useState(false);
  const [previewSVG, setPreviewSVG] = useState('');

  const getContent = () => {
    if (contentRef.current) {
      return contentRef.current.innerHTML;
    }
    return '';
  };

  // 判断是否为SVG代码的函数
  const isSVGCode = (code) => {
    const lowerCode = code.toLowerCase();
    return lowerCode.includes('<svg') && lowerCode.includes('</svg>');
  };

  // 添加SVG预览处理函数
  const handlePreviewSVG = (svgCode) => {
    setPreviewSVG(svgCode);
    setPreviewVisible(true);
  };

  return (
    <MessageWrapper>
      <MessageAvatar $isUser={message.isUser}>
        {message.isUser ? <UserOutlined /> : <RobotOutlined />}
      </MessageAvatar>
      <MessageBubble isUser={message.isUser}>
        <MessageContent isUser={message.isUser}>
          <div ref={contentRef}>
            <StyledMarkdown
              isUser={message.isUser}
              components={{
                code({node, inline, className, children, ...props}) {
                  const match = /language-(\w+)/.exec(className || '');
                  const codeContent = String(children).replace(/\n$/, '');
                  
                  // 检查是否为SVG代码
                  const isSvg = !inline && (match?.[1] === 'svg' || match?.[1] === 'html' || match?.[1] === 'xml') && isSVGCode(codeContent);
                  
                  return !inline && match ? (
                    <div style={{marginBottom: '10px'}}>
                      {isSvg && (
                        <CodeHeader>
                          <span className="code-language">{match[1].toUpperCase()} SVG</span>
                          <div className="code-actions">
                            <PreviewButton
                              type="primary"
                              size="small"
                              onClick={() => handlePreviewSVG(codeContent)}
                              icon={<EyeOutlined />}
                            >
                              预览SVG
                            </PreviewButton>
                          </div>
                        </CodeHeader>
                      )}
                      <SyntaxHighlighter
                        style={tomorrow}
                        language={match[1]}
                        PreTag="div"
                        {...props}
                      >
                        {codeContent}
                      </SyntaxHighlighter>
                    </div>
                  ) : (
                    <code className={className} {...props}>
                      {children}
                    </code>
                  );
                },
                img({node, ...props}) {
                  // 处理图片显示
                  return (
                    <img 
                      {...props}
                      style={{
                        maxWidth: '100%',
                        borderRadius: '8px',
                        margin: '10px 0',
                        boxShadow: '0 4px 12px rgba(0,0,0,0.1)'
                      }}
                      alt={props.alt || ''}
                      onError={(e) => {
                        e.target.onerror = null;
                        e.target.src = '/placeholder-image.png'; // 设置一个占位图像
                      }}
                    />
                  );
                }
              }}
            >
              {message.content}
            </StyledMarkdown>
          </div>
          {!message.isUser && (
            <ActionButtons>
              <ActionButton isUser={message.isUser} onClick={() => handleCopy(getContent())}>
                <CopyOutlined /> 复制
              </ActionButton>
              <ActionButton isUser={message.isUser} onClick={() => handleExport(getContent())}>
                <DownloadOutlined /> 导出
              </ActionButton>
              <ActionButton isUser={message.isUser} onClick={() => handleExportPDF(getContent())}>
                <FilePdfOutlined /> PDF
              </ActionButton>
              <ActionButton isUser={message.isUser} onClick={() => handleExportMarkdown(getContent())}>
                <FileMarkdownOutlined /> MD
              </ActionButton>
            </ActionButtons>
          )}
        </MessageContent>
      </MessageBubble>
      
      {/* SVG预览Modal */}
      <SVGPreviewModal
        title="SVG图像预览"
        open={previewVisible}
        onCancel={() => setPreviewVisible(false)}
        footer={[
          <Button key="close" onClick={() => setPreviewVisible(false)}>
            关闭
          </Button>
        ]}
        width={600}
      >
        <div className="svg-preview-container" dangerouslySetInnerHTML={{ __html: previewSVG }} />
      </SVGPreviewModal>
    </MessageWrapper>
  );
};

export default Message; 